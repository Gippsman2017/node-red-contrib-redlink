v 3.0.5 Fixed the Consumer notify srcStoreName to the producer's storename, it was actually sending the consumers own store name in error.
v 3.0.4 Added arm64 CPU type by removing base64-coder-node library, it stopped redlink loading.
v 3.0.3 Removed issue of ECONresets when full deploying under high load.
v 3.0.2 Refactored comsumer notifies for for manual read and reduced overall notifies to each consumer eg only notify when it has something to process and has completed its last job.
	Fixed read error messages when due to being notified twice for the same readlinkMsgId in error.
v 3.0.1 Fixed LB, enm, renotify from producer.
	When a producer sends a notify, it no longer causes the consumer to send out the notify untile a new "Confirmation" message is sent, this means that the consumer now controls its capability to consume.
v 3.0.0 Complete re-write of socket handling.
	1.All messages are now confirmed with the inMessages store before a notification is sent, this removes wrong notifications to consumers
	2.Loadbalancer now has a different method of determining consumer load using a new parameter called ENM (Expected Noticifaction Metric), each consumer has a % load value based on interansit limit.
	3.Each Consumer Store now decouples consumers with the same service name into individual consumers and only one producer notify is sent to them individually.

v 2.2.1 Completed the load balancer to consumer notifications, reduced the notifys where multiple consumer for the same services are being load balanced and sped up the renotify when reading / replying
v 2.2.0 Major update of interstore loadbalancer
	1. Removed random code as it wasnt really random and it tended to bias the seed values at the ends.
	2. Added two new parameters called ECM (Expected consumer read metric), ERM (Expected consumer reply metric), both values are calculated in milliseconds.
	3. Algorythm uses ecm to workout when a consumer has read the message from the first time it was notified and then informs the stores in reverse order the value all the way back to the producer store
	4. Algorythm uses erm to workout when a consumer has replied to the message from the time it was notified and then informs the stores in reverse order the value all the way back to the producer store
	5. Loadbalancers can then decide when to send a message to either:
		a. A consumer that is free.
		b. A consumer has a low reply time.

v 2.1.2 Update of :
	  Hop counter's north and south are now calculated consistantly when many node-red instances are used.
	  Registration's are now near instantaneous when redeploying node-red flows.
	  	  
v 2.1.1 Consumer:
            1. notify messages now have the producerId
            2. retrieveTime renamed to retrieveDelay
            3. consumer passes the producerId to the store when reading message so that the store can pass it back in case of error- tldr; consumer error message contains producerId when available
	
	Producer:  	
	  Failure messages are now consistent- following error cases are covered:        
  	    1. timeout
            2. inability to create large message directory/ write message/preserved to large message directory
            3. unknown or missing service
        Store:
          speed up cleanup on node close
            1. only make calls to delete large message directories for remaining messages if they are large
            2. https server is now closed asynchronously- using only one event listener for the node close event should also help
v 2.1.0	Bumped to get npm to publish it
v 2.0.4 Changed default behaviour to false on new north bound connections.
v 2.0.3 Fixed the south to north store insert rule, this was broken on the v 2.0.0 deploy, it stopped the reverse north to south replication on multiple instances from working correctly distributing services.
v 2.0.2 Consumer changes/fixes:
        1. topic can be read or consumerread- this has been made case insensistive
        2. in case of manual read, notifies would still go out for messages already read (but not replied)- fixed
        3. notify count in status was incorrect- fixed
        4. added fields retrieveTime (difference in timestamps between the message being injected into the producer and the consumer reading it- please note that this value depends on the clocks of the systems running the producer and consumer) and readDelay (time in seconds that the message spent waiting to be read). Note that these two values will be roughly the same but will not coincide exactly

        error messages- have handled the following cases
        1. attempt to reply to message before reading. to recreate, feed the notify directly back into the consumer
        2. attempt to reply to a sendonly message
        3. missing redlinkmsgid when sending a reply message
        4. attempt to manually read message when consumer set to auto read
        5. when store sends a non 200 status code on consumerread, error message now contains the error and any description
        6. all consumer errors are now standardised- they will contain at the minimum:
            storename- the name of the store to which this consumer is connected
            consumername- the name of this consumer
            consumerid- the id of this consumer
            action- the action taken when the error occurred- consumerRead, consumerReadWithoutId or consumerReply
            error- the error description
            redlinkMsgId- the redlinkMsgId of the msg if any
v 2.0.1 Fixed bug- timer should update lifetime for only this producer's messages
v 2.0.0 Redlink is now service aware and full control of service visibility using redistribution on north connections and south inter controls are available
	Producer visibility of services is now individual store aware and ordered.
v 1.8.1 Fixed redistribute bug- was returning false as a string instead of boolean; remove console.log from redlinkstore
v 1.8.0 Added msg.cerror to consumer replies so that it forces the producer to send the response to its "failure" ouput, msg.cerror meaning "consumer error" can be an object
v 1.7.2 Added redistribute option for north peers in stores- required for service isolation
v 1.7.1 Made reNotifyInterval field optional in consumer UI- it defaults to 1 in the backend, fixed bug- new messages
        array can be empty in new message trigger of store
v 1.7.0 Feature addition, producer stores can now also loadbalance directly to north or south stores without the need to have a separate north store to provide
        the functionality.
v 1.6.1 Fixed msg.payload encode/decode type to utf16le- this is due to using 'binary' for base64 encoding/decoding stores only first eight bits
        of each character and so doesn't handle special characters like apostrophe (â€™) .
        See https://www.npmjs.com/package/base64-coder-node#supported-encodings
v 1.6.0 Feature upgrade, large messages are now theoretically 1GB
        Found bug in the request.js library, if you want to use no_proxy, then you must not put a wildcard or "." infront of the url
        eg export no_proxy="abc.myurl.com", this will wildcard anything infront of the abc etc.
        More html validation fixes.
v 1.5.5 Fix timing issue when populating consumers from producer- clear existing options in consumer select just before
        populating with available consumers; fix large message support- increase bodyParser limit, clean up large message
        directory after read, redeploy and store startup
v 1.5.4 simplify all-store-names route; remove unused code in redlink.html and redlink.js;
        fix store select ui validation- populate default in ui rather than in backend route,
        tweaks to validate- see https://discourse.nodered.org/t/problem-with-validation-in-ui/17307/7 for more info
v 1.5.3 add renotify interval for consumer; fix error message for messages which may have already been read; fix ett,
        notifyInterval validation for producer
v 1.5.2 Error messages fixed in store
v 1.5.1 Completed the html changes for producer, consumer and store 
v 1.5.0 Feature added "Interstore Load Balancing", when set in the store, multiple service registrations of the same name
        will cause the store to send single producer message notifications using randomly load balance to North / South destination consumer stores.
        This will provide a more equitable consumption of producer messages and a reduction of notifications will be noticed.
        Minor fixes for TLS errors under high message load.
        More documentation.
v 1.4.2 Small fix for msg.enforceReturnPath logic overrides config logic
        Now traps bad listener startup and displays it node.status
        More documentation
        Removed leftover console.log from producer
v 1.4.1 Added html and flag to Producer, user can also use msg.enforceReturnPath to overide the config checkbox 
v 1.4.0 Feature added, will be completed in v 1.4.1, return paths for read and reply are now set by the producer.
        This means that the producer and tell the consumer to transact via the stores that supplied the notify
        instead of attemping to directly read and reply to the producer store.
        This feature is what you need to use as a proxy gateway to the internet etc. 
V 1.3.2 Fixed an issue with sendonly causing issues in the consumer with or without sendonly (#8 giminni)
V 1.3.1 Added Producer ETT error data to the failure port on Producer.
        Fixed the ETT timer, it was incrementing by 2, strange bug.
        Fixed the HTML consumer / producer deploy, seem to have broken it in 1.3.0!
        The path that the notifiy has traversed has been added to all Producer notify messages.
        node.status data has been sped up to show mesh resync on deploys.
v 1.3.0 Changed the algorythm for Producer and Consumer notifies, they now have internal timers as well.
        Added more info to node.status.
v 1.2.2 Cleaned up local and remote producer notifies
v 1.2.1 Added more info to node.status
v 1.2.0 Fixed the store / consumer / producer connections and added node.status info.
v 1.1.9 Bump Git update
v 1.1.8 redlinkConsumer mod for Deploy "Modified Nodes" didnt delete Consumer record first, could add to another store causing duplicates
v 1.1.7 UI tweaks in configuration html; font awesome icons
v 1.1.6 Add support for user to provide their own certificate for each store- defaults to self signed
        Show status on store node- if unable tos tart server on the listen address, the store node will have a red icon
v 1.1.5 Added a flag to stop redlinkStore globalConsumer inserts from southBound stores.
	Fixed a bug where North Stores forget to remove south peers from their stores when the south peer is no longer connected
	it was causing the south store being updated from the north store regardless.
v 1.1.4 Updated the Readme for more clarity indicating Redlink configurations and added an Index.
v 1.1.3 Added the capability for North stores to delete South store entries when South Stores are not
        contactable during reSync. All registration entries are also removed.
        Also deleted North Store registrations from the South stores when unable to contact North stores during reSync.   
v 1.1.2 Bug fix- msg.topic appears in producer destination drop down twice
v 1.1.1 Changed the Store Sync algorithm so that a south store with multiple north stores cannot relay
	Changed the Sync timing to ensure that entries are delete/purged correctly.
	Ensured that Node-Red Deploy's cause correct propagation of the services throughout the mesh. 
v 1.0.2 Add ETT to timeout message , notify interval to repeatedly notify consumers of messages
v 1.0.1	Changed the SSL key size to 2048 (was 1024), required by new v2 spec.
	Major change required for container issues causing wrong Consumer Updates to be blocked and not cascaded.
	So, replaced the store algorythms for store updates and interconnection resync's
	A New reSync timer has been added (currently 30s) to redlinkStore to enforce ALL north bound registrations.
	The Store and Consumer Registration flow is now:
	  1/ Inform the defined north store of this south connection
	  2/ This South Store sends its Consumer service registrations North
	  3/ The North Store then uses its own reSync timer to cascade the registrations to its north and south peers.
        redlinkConsumer has a mod for topic (read) to be consistent with redlinkProducer
v 0.3.7 Make consumer read consistent with producer- manual read now works off msg.topic='read' rather than msg.cmd
v 0.3.6 Fixed priority
v 0.3.5 More Documentation updates.
v 0.3.4 Fix rate limiter- extract rate limiter initialisation into separate module; work around for a bug in third party rate limiter
v 0.3.3 Fixed Producer, msg.topic can now be used to set target service, new store listServices call.
v 0.3.2 Send notify in store when transiting notifications, fix notify in producer
v 0.3.1 Setting file Defaults updated.
v 0.3.0 Documentation update.
v 0.2.0 Rewrite of redlinkStore to implement a protocol similar to OSPF adds hopcount and removes circular routing issues. 
v 0.1.1 Change to redlinkStore.js to cater for mesh registrations and notifies
v 0.1.0 Rewrite of producer / consumer and removed reply node.
v 0.0.5 Lots of changes to consolidate producer, consumer replies
v 0.0.4 Added mesh support for consumers, store; merge John's changes
v 0.0.3 Coding, Colours, Logging Updates
v 0.0.2 Documentation Update
v 0.0.1 Initial concept design
